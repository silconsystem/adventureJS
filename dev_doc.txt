*********** javascript adventure game project
*********** 2020
*********** R van Ardenne



start with ask name in <DIV> name-input			        __> write name to <DIV> player-stats <SPAN> char-name
	_> nameBtn.onclick: 
		_> set var playerName;
		_> player.name = playerName;
		_> write html;

select player Class in <SELECT> character-menu	    __> write class to <DIV> player-stats <SPAN> char-class
	_> charSelMenu.onchange:
	_> set var playerClass;
	_> player.class = playerClass;

select player arms in <SELECT> weapon-menu		      __> write choice to <DIV> player-stats <SPAN> arm-name
	_> set var playerWeapon if playerClass is set;
  _> player.weapon = playerWeapon;
  _> write html; 
  _> add image to inventory;                        __> textparser depend  T_P**
  _> add item to player.inventory.items array       __> textparser depend  T_P**  !_TODO_! ~~~~ NOTICE !

if character created: enable movement buttons       __>                           !_TODO_!
  _> load room: room_00(counter_$)
    _> room returns: objects (after room one: remove old objects)                 !_TODO_!
    _> handle player interaction:
      _> items    >> take | drop to/from player.inventory.items            T_P**  ! DONE !
      _> weapons  >> take | drop to/from player.inventory.items            T_P**  ! DONE !
-----------------------------------------------------------------------------------------------------------
  :: figuring out game logic ::
-----------------------------------------------------------------------------------------------------------
TODO: change layout	if previous fields are all set with valid values
  -> character stats visible after user input fields submitted                    ! DONE !
  -> load room html                                                               ! DONE !
  -> create room object handler,                                                  !_TODO_!
      - onload return room objects 
      - write description
==========================================================================================    
TODO: create text parser                                                          !_TODO_!

  -> test if string values exist and extract command and item and if 3rd strVal   ! DONE !
  -> test if if object to add exists in room & take = 1                           ! DONE !
    -> NPC, enemy handler:                                                        !_TODO_!
      -> if NPC: get desription and responses                                     !_TODO_!
      -> if enemy: get desription and responses:
        -> CMD == attack >> to battleSystem() logic                         (!! BIG TODO !!)

        NOTICE CREATE NEW ARRAY STRUCTURE SO EVERY OBJECT NAME
        CAN BE FOUND WITH ONE IDENTIFIER :
          objects {
            type: array[name,description,game,img_url]
          }
        i.e: objects.type[0] = array[0](name);                                    !_WORK_!

TODO: room objects/actors handling, trying to create a class that should
  load a new <HTML> page dynamicly and setting the object properties
  accordingly, the class takes the movecount as id where the class will
  use its getters and setters to access the related room data out of the 
  room_objects object array structured like the inventory objects array
Room Class, get event information and set room data accordingly

basic structure:

class roomHandler(counter, direction)

  constructor:
    - get the id of the room to link it with the room objects array properties
    - get the move of the player
    - use the counter to set the id

  methods:

    build room:
    - get and set needed values
    - return needed value

    - scene method; use id to find and return the proper html responses
     - describe : on entry => to <html>
     - look   : get look from room_objects[id].look[etc]
     - weapon   : check what it is, check if it can be taken, decribe
     - item   : same
     - npc    : check if npc in room #no[id]; 
      - if Y: check type: npc/enemy
       - description => to <html>
       - call handle setting npc properties
        - call text parser argument handle
        - return results and setup for further handling
     - trap   : check if trap in room #no[id]
     - secret   : check if secret in room #no[id]

    entry method:
    - get the value of entry so we can keep handle a map
     - if exit = south: entry = north (moveControl(button pressed)) {returns : entryPoint}
     - set entryPoint and set it as room_object variable
     - if entered, set entry_flag to true, when true pressing NESW buttons doesnt update moveCount.
      - NESW buttons onclick:
        - check exit y/n flags, give descriptions
        - UI: if exit N|E|S|W tests true; ask user to exit Y/N
        - if Y: update moveCount,load a new room using updated moveCount as [id]
        - if N: do nothing, freeze moveCount untill user input = Y(ES)

    >>  TODO style change idea? : 
          >>> 
          probable the look|weapon|item buttons are more efficient as text commands
          so create code with this in mind so a change will be easy
          or the user input could be re-imagined as an icon for each action like
          SCUMMVM games or a mix like early Sierra titles like Leisure Suit Larry,
          space quest or more modern like discworld
          <<<
    <<

    - handle text input for objects                                               !_DONE_!
     - pick/drop up object                                                        !_DONE_!
      - add/remove from player inventory by type => remove from <HTML> page       !_DONE_!
      - talk to                                                                   ! TODO !
       - check if npc in room
        - if Y: 
         - get type, set properties
        - if N: 
         - nothing
        - if Y: 
         - describe,
         - let speak if !mute,
         - attack:
          - passive
          - attack after speak
          - set defeat/leave
      - attack/leave                                                              !_TODO_!
==========================================================================================
TODO: one function to set item image when added to inventory

  if character weapon is chosen:
    -> get the weapon object and set its variables
      _> function loadImage(object.name, DOM.id) {

        loop game_objects.name
          compare -->> object[index].name
          set inline variable -->> object[index].url
      }
      writeHTML(DOM.id, $_URL)

  line 229: if you switch around stuff will keep adding to inventory
    _> player.weapon should be set after character create

  text-parser.js:
    html is added, url is correct but no scrolling possible
    weapon items dont work

  action handles 83: faulty values, probably double

  ____ADD MAGIC AND SKILL WHEN TEXT PARSER AND ROOM LOGIC IS DONE____             !_TODO_!
==========================================================================================
TODO: create room loading logic:
  -> movement buttons.onload(): get objects inside room by retuning html.elem.    !_TODO_!

WORK TODO:

I've changed the game_objects array structure hopefully this will make sorting easier.
the current solution has had some helpfull pointers and solutions by these great
coders who took the time to awnser my questions;
https://stackoverflow.com/questions/60577735/access-to-object-arrasy-and-values-with-loops

Abdullah Abid, Josh Wulf, ffflabs thank you !!

-----------------------------------------------------------------------------------------------------------